<wiki:toc />
----
= Samples Overview =
This section provide explanation about different sample scenarios. The scenarios have been selected so that they cover different areas of projects. At the beginning it has been tried to show how can use the ADC and DAC in GISOO and in the next step the required details foe serial communication has been explained and the usage of serial communication has been shown in a simple example. In the next step the the previous simple scenario has been extended to show the usage of CTP routing protocol in the routing layer. 

== Serial Communication ==
More over to ADC and DAC, GISOO also supports the Serial communication between Simulink and Cooja. This facility make it possible to simulate those systems with the need of powerful processing resource as a  controller. In this situation by using a motes with a "BaseStasion" application which can act as a gateway we can transfer our collected data to a PC where the controlling computation will be done and finally the results can be send back via the serial communication to the wireless system to be used in order to control the plant.

=== double-tank system with the controller on PC ===
In the section "[https://code.google.com/p/kth-gisoo/wiki/How_to_use_it , How to use GISOO] " we introduced the double-tank system as a "[https://code.google.com/p/kth-gisoo/wiki/How_to_use_it#Simple_Scenario , simple scenario]". In this section we explain the same simulation scenario but by locating the control process on a PC instead of a mote. The following picture shows both scenarios with controller in a mote or in a PC.


<p align="center">   
<img src="https://kth-gisoo.googlecode.com/svn/trunk/images/samples/serialcommunication/SimpleScenarioMix.png >
<p>

In order to simulate the scenario with the controller on PC first we should create all of our motes  in Cooja, so we should four motes: one Sensor, one relay, one Base-Station and, one actuator. You can download the TinyOS code for the motews from here (?????????????) these codes are exactly the same code as those we had for our simple scenario with the new message structure for the sensor and actuator and also instead of a code for controller we have a modified code for base-station which send the radio messages to the actuator instead of broadcast which will be explained in the following.  

==== Message structure for the serial communication in GISOO ====
The details od designed messages structure for data transmission between Simulink and Cooja in GISOO has been explained in (?????????????????). But in very short, to understand this part, we should know that GISOO has been designed so that for serial communication between Cooja and Simulink the serial data should have <b>16 bytes structure</b> (The data structure that you define in TinyOS code of your mote to be sent or received via serial should have 16 bytes). It means that the serial data can not be longer than 16 byes (if you need to communicate more than 16 bytes you should divide it to different messages) or also if your message is smaller than 16 byte you still have to define 16 byte data structure but you can leave the unneeded parts, empty. For this reason we changed the data struct of the message from sensor to the controller (relay will just forward the message without any modification) to make in a 16 bytes structure. In the define code for this scenario in the "app_parameters.h" the sensor data contains 16 bytes as it has shown in the following:

{{{
// Type of message send by the sensor node to the relay node
typedef struct SensorValues {
	nx_uint16_t tankLevel[8]; // tankLevel[0] for the tank-1 and tankLevel[1] for tank-2 and the rest of the structure will not be used.
} SensorValues;
}}}

For the same reason the message that will be sent from base-station to the actuator also has 16 bytes structure so that the structure of the message that should be received by actuator should also be changed to 16 byte:

{{{
// Type of message send by the controller (base-station) to the actuator node
typedef nx_struct EncMsg2SensorsAct {
	nx_uint16_t u[8]; // Actuation value send to the actuator(from base-station). u[0] contains the actuation value and the rest of the data structure is empty.
}EncMsg2SensorsAct;
}}}

The other point that has been mentioned about the codes in this scenario was the modified base-station. Since we would like to forward all the actuation values from PC to the actuator (not the other motes) we modified the send function of the basestaion so that it just forward the radio messages to the actuator (mote with id:5 in this scenario). As it has been shown in the following code, the "addr" value has been changed to a fix id of actuator mote (5).  
{{{
task void radioSendTask() {
    uint8_t len;
    am_id_t id;
    am_addr_t addr,source;
    message_t* msg;
    
    atomic
      if (radioIn == radioOut && !radioFull)
	{
	  radioBusy = FALSE;
	  return;
	}

    msg = radioQueue[radioOut];
    len = call UartPacket.payloadLength(msg);
    addr = 5;//call UartAMPacket.destination(msg);
    source = call UartAMPacket.source(msg);
    id = call UartAMPacket.type(msg);

    call RadioPacket.clear(msg);
    call RadioAMPacket.setSource(msg, source);
    
    if (call RadioSend.send[id](addr, msg, len) == SUCCESS)
      call Leds.led0Toggle();
    else
      {
	failBlink();
	post radioSendTask();
      }
  }
}}}

After preparing our TinyOS codes we have to create all the motes in Cooja. It has bees shown in the following picture. In this scenario mote-ids has been defined in the "app_parameters.h": 
{{{
        COORDINATOR_ADDRESS	=	4,
	SENSOR_ADDRESS 		=	2,
	ACTUATOR_ADDRESS 	= 	5,
	RELAYNODE_ADDRESS 	= 	3,
}}}

So we have to create the motes with the mentioned id but instead of Coordinator (Controller) we have to create our base-station. After creating, for those motes which needs to be connected to the plant or PC(for controlling purposes) we have to activate the "SimulinkConnector" plug-in. In this scenario sensor needs to sense the water level from the plant, actuator should be able to send the actuataion value to the plant, and also base station should be able to transfer the serial data to the controller model in the PC and receive the results back from that model. As it has shown the SimulinkConnector has been activated for these motes.
<p align="center">   
<img src="https://kth-gisoo.googlecode.com/svn/trunk/images/samples/serialcommunication/SerialCommunication.png >
<p>





<p align="center">   
<img src="https://kth-gisoo.googlecode.com/svn/trunk/images/samples/serialcommunication/SimulationModelForSerialCommunication.png>
<p>


<p align="center">   
<img src="https://kth-gisoo.googlecode.com/svn/trunk/images/samples/serialcommunication/inside_CoojaPlatform_SerialCommunication.png>
<p>

== CTP ==



<p align="center">   
<img src="https://kth-gisoo.googlecode.com/svn/trunk/images/samples/CTP/Cooja_LargeScenario.png>
<p>



<p align="center">   
<img src="https://kth-gisoo.googlecode.com/svn/trunk/images/samples/CTP/Simulink_LargeScenario.png>
<p>



<p align="center">   
<img src="https://kth-gisoo.googlecode.com/svn/trunk/images/samples/CTP/CoojaPaltform_LargeScenario.png>
<p>